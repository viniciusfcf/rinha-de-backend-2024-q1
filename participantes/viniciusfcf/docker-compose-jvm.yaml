version: "3.6"

services:
  api01: &api
    # Lembre-se de que seu serviço HTTP deve estar hospedado num repositório
    # publicamente acessível! Ex.: hub.docker.com
    image: viniciusfcf/rinha-backend-2024q1-jvm:latest
    hostname: api01
    network_mode: host
    environment:
      - QUARKUS_HTTP_PORT=8081
    depends_on:
      db:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "300MB"
    ulimits:
      nproc: 65535
      nofile:
        soft: 1000000
        hard: 1000000

  api02:
    # Essa sintaxe reusa o que foi declarado em 'api01'.
    <<: *api 
    hostname: api02
    environment:
      - QUARKUS_HTTP_PORT=8082
 
  nginx:
    image: nginx:1.25.3
    network_mode: host
    volumes:
      - ./nginx-local.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api01
      - api02
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "50MB"

  db:
    image: postgres:16.1
    hostname: db
    environment:
      - POSTGRES_PASSWORD=123
      - POSTGRES_USER=admin
      - POSTGRES_DB=rinha
    network_mode: host
    volumes:
      - ./import.sql:/docker-entrypoint-initdb.d/script.sql
    deploy:
      resources:
        limits:
          # Note que a soma de todos os limites dos serviços
          # aqui declarados é de 1.5 unidades de CPU e 550MB
          # de memória. A distribuição feita aqui é apenas
          # um exemplo – distribua como quiser.
          cpus: "0.8"
          memory: "100MB"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s


